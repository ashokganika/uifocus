{"version":3,"sources":["component/header.js","screen/aboutus.js","screen/blog.js","screen/home.js","App.js","serviceWorker.js","index.js"],"names":["menutItemDetail","itemName","itemUrl","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","breakpoints","down","menuItem","display","flex","justifyContent","withRouter","history","classes","useTheme","isExtraSmall","useMediaQuery","React","useState","anchorEl","setAnchorEl","open","Boolean","handleClose","newUrl","screenSize","push","console","log","className","AppBar","position","Toolbar","Typography","variant","IconButton","aria-label","aria-controls","aria-haspopup","onClick","event","currentTarget","color","id","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","map","MenuItem","key","Button","Aboutus","Blog","Home","props","App","exact","path","component","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sVAYMA,EAAkB,CACtB,CACEC,SAAU,OACVC,QAAS,KAEX,CACED,SAAU,OACVC,QAAS,SAEX,CACED,SAAU,WACVC,QAAS,cAIPC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAM,eACHN,EAAMO,YAAYC,KAAK,MAAQ,CAC9BN,SAAU,IAGdO,SAAU,CACRC,QAAS,OACTC,KAAM,EACNC,eAAgB,oBAsFLC,mBAlFf,YAA8B,IAAZC,EAAW,EAAXA,QACVC,EAAUjB,IACVE,EAAQgB,cACRC,EAAeC,YAAclB,EAAMO,YAAYC,KAAK,OAH/B,EAIKW,IAAMC,SAAS,MAJpB,mBAIpBC,EAJoB,KAIVC,EAJU,KAKrBC,EAAOC,QAAQH,GAMfI,EAAc,SAACC,EAAQC,GAC3BD,GAAUZ,EAAQc,KAAKF,GACvBC,GAAcL,EAAY,MAC1BK,GAAcE,QAAQC,IAAI,uCAG5B,OACE,yBAAKC,UAAWhB,EAAQd,MACrB4B,QAAQC,IAAI,kBAEb,kBAACE,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAWhB,EAAQT,OAA5C,UAICW,EACC,oCACE,kBAACoB,EAAA,EAAD,CACEC,aAAW,0BACXC,gBAAc,cACdC,gBAAc,OACdC,QA1BK,SAACC,GAClBpB,EAAYoB,EAAMC,gBA0BNC,MAAM,WAEN,kBAAC,IAAD,OAEF,kBAAC,IAAD,CACEC,GAAG,cACHxB,SAAUA,EACVyB,aAAc,CACZC,SAAU,MACVC,WAAY,SAEdC,aAAW,EACXC,gBAAiB,CACfH,SAAU,MACVC,WAAY,SAEdzB,KAAMA,EACN4B,QAAS,kBAAM7B,EAAY,QAE1B3B,EAAgByD,KAAI,gBAAGxD,EAAH,EAAGA,SAAUC,EAAb,EAAaA,QAAb,OACnB,kBAACwD,EAAA,EAAD,CACEZ,QAAS,kBAAMhB,EAAY5B,EAAS,SACpCyD,IAAK1D,GAEJA,QAMT,yBAAKmC,UAAWhB,EAAQN,UACrBd,EAAgByD,KAAI,gBAAGxD,EAAH,EAAGA,SAAUC,EAAb,EAAaA,QAAb,OACnB,kBAAC0D,EAAA,EAAD,CACED,IAAK1D,EACLwC,QAAQ,YACRK,QAAS,kBAAMhB,EAAY5B,EAAS,QAEnCD,aCnHJ,SAAS4D,IACtB,OACE,6BACE,4DCHS,SAASC,IACtB,OAAO,8CCDM,SAASC,EAAKC,GAC3B,OAAO,yDCiBMC,MAbf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWL,IACjC,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,QAAQC,UAAWN,IACrC,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,YAAYC,UAAWP,OCF7BhC,QACW,cAA7BwC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.76c6cbb6.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Menu from \"@material-ui/core/Menu\";\nimport { withRouter } from \"react-router-dom\";\nimport { Button, useMediaQuery } from \"@material-ui/core\";\n\nconst menutItemDetail = [\n  {\n    itemName: \"Home\",\n    itemUrl: \"/\",\n  },\n  {\n    itemName: \"Blog\",\n    itemUrl: \"/blog\",\n  },\n  {\n    itemName: \"About Us\",\n    itemUrl: \"/about-us\",\n  },\n];\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    [theme.breakpoints.down(\"xs\")]: {\n      flexGrow: 1,\n    },\n  },\n  menuItem: {\n    display: \"flex\",\n    flex: 1,\n    justifyContent: \"space-around\",\n  },\n}));\n\nfunction Header({ history }) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const isExtraSmall = useMediaQuery(theme.breakpoints.down(\"xs\"));\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n\n  const handleMenu = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = (newUrl, screenSize) => {\n    newUrl && history.push(newUrl);\n    screenSize && setAnchorEl(null);\n    screenSize && console.log(\"i am rendered at small screen only\");\n  };\n\n  return (\n    <div className={classes.root}>\n      {console.log(\"i am rendering\")}\n\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Photos\n          </Typography>\n\n          {isExtraSmall ? (\n            <>\n              <IconButton\n                aria-label=\"account of current user\"\n                aria-controls=\"menu-appbar\"\n                aria-haspopup=\"true\"\n                onClick={handleMenu}\n                color=\"inherit\"\n              >\n                <MenuIcon />\n              </IconButton>\n              <Menu\n                id=\"menu-appbar\"\n                anchorEl={anchorEl}\n                anchorOrigin={{\n                  vertical: \"top\",\n                  horizontal: \"right\",\n                }}\n                keepMounted\n                transformOrigin={{\n                  vertical: \"top\",\n                  horizontal: \"right\",\n                }}\n                open={open}\n                onClose={() => setAnchorEl(null)}\n              >\n                {menutItemDetail.map(({ itemName, itemUrl }) => (\n                  <MenuItem\n                    onClick={() => handleClose(itemUrl, \"true\")}\n                    key={itemName}\n                  >\n                    {itemName}\n                  </MenuItem>\n                ))}\n              </Menu>\n            </>\n          ) : (\n            <div className={classes.menuItem}>\n              {menutItemDetail.map(({ itemName, itemUrl }) => (\n                <Button\n                  key={itemName}\n                  variant=\"contained\"\n                  onClick={() => handleClose(itemUrl, null)}\n                >\n                  {itemName}\n                </Button>\n              ))}\n            </div>\n          )}\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nexport default withRouter(Header);\n","import React from \"react\";\n\nexport default function Aboutus() {\n  return (\n    <div>\n      <h2>About us page welcomes you.</h2>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function Blog() {\n  return <div>This is blog.</div>;\n}\n","import React from \"react\";\n\nexport default function Home(props) {\n  return <div>Welcome to our web site.</div>;\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Header from \"./component/header\";\nimport Aboutus from \"./screen/aboutus\";\nimport Blog from \"./screen/blog\";\nimport Home from \"./screen/home\";\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/blog\" component={Blog} />\n        <Route exact path=\"/about-us\" component={Aboutus} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}